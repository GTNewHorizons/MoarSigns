buildscript {
    repositories {
        mavenCentral()
        mavenLocal()
        maven {
            name = "forge"
            url = "http://files.minecraftforge.net/maven"
        }
        maven {
            name = "sonatype"
            url = "https://oss.sonatype.org/content/repositories/snapshots/"
        }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:1.2-SNAPSHOT'
    }
}

configurations {
    deployerJars
}

repositories {
    mavenCentral()
}

apply plugin: 'java'
apply plugin: 'forge'

// Define properties file
ext.configFile = file "build.properties"

configFile.withReader {
    // Load config.  It shall from now be referenced as simply config or project.config
    def prop = new Properties()
    prop.load(it)
    project.ext.config = new ConfigSlurper().parse prop
}

version = "${config.mc_version}"+ "-" + "${config.mod_version}"
group= "se.gory_moon" // http://maven.apache.org/guides/mini/guide-naming-conventions.html
archivesBaseName = "MoarSigns"

minecraft {
    version = "${config.mc_version}"+ "-" + "${config.forge_version}"
    runDir = "run"

    replaceIn "ModInfo.java"
    replace "@MOD_VERSION@", config.mod_version
    if (project.hasProperty("ms_sha1_signature")) {
        replace "@FINGERPRINT@", project.ms_sha1_signature
    }
}

repositories {

    maven { // NEI and friends
        name 'Chickenbones'
        url 'http://chickenbones.net/maven/'
    }

    maven {
        name 'Prof. Mobius'
        url 'http://mobiusstrip.eu/maven'
    }

    maven {
        name "ic2"
        url "http://maven.ic2.player.to/"
    }

    maven {
        name 'DVS1 Maven FS'
        url 'http://dvs1.progwml6.com/files/maven'
    }

    ivy {
        name "MineTweaker3"
        artifactPattern "http://minetweaker3.powerofbytes.com/download/[module]-[revision].[ext]"
    }
}

dependencies {
    deployerJars "org.apache.maven.wagon:wagon-ftp:2.2"

    compile "codechicken:CodeChickenLib:" + config.mc_version + "-" + config.cclib_version + ":dev"
    compile "codechicken:CodeChickenCore:" + config.mc_version + "-" + config.ccc_version + ":dev"
    compile "codechicken:NotEnoughItems:" + config.mc_version + "-" + config.nei_version + ":dev"
    compile "mcp.mobius.waila:Waila:" + config.waila_version + "_" + config.mc_version + ":dev"

    compile name: 'MineTweaker3', version: config.minetweaker_version, ext: 'jar', group: ''

    // you may put jars on which you depend on in ./libs
    // or you may define them like so..
    //compile "some.group:artifact:version:classifier"
    //compile "some.group:artifact:version"

    // real examples
    //compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    //compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // for more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html

}

processResources
{
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", config.mod_version
    inputs.property "mcversion", project.minecraft.version

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': config.mod_version, 'mcversion': project.minecraft.version
    }

    // copy everything else, thats not the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}

jar {
    manifest {
        attributes 'FMLAT': 'moarSigns_at.cfg'
    }
}

task devJar(type: Jar, dependsOn: 'classes') {
    from(sourceSets.main.output) {
        include '**'
    }

    extension = 'jar'
    classifier = 'dev'
}
task sourceJar(type: Jar) {
    from(sourceSets.main.allSource) {
        include '**'
    }
    extension = 'jar'
    classifier = 'sources'
}


artifacts {
    archives devJar
    archives sourceJar
}

tasks.build.dependsOn('signJar')

if (!project.hasProperty("keystore_location")) // keystore stuff
    ext.keystore_location = "."
if (!project.hasProperty("keystore_password")) // keystore stuff
    ext.keystore_password = ""
if (!project.hasProperty("ms_keystore_alias")) // keystore stuff
    ext.ms_keystore_alias = ""

task signJar(dependsOn: ["reobf", "devJar"]) {
    inputs.dir jar.destinationDir
    inputs.file keystore_location
    inputs.property "ms_keystore_alias", ms_keystore_alias
    inputs.property "keystore_password", keystore_password
    outputs.dir devJar.destinationDir

    // only sign if the keystore exists
    onlyIf {
        return keystore_location != "." && keystore_password != ""
    }
    // the actual action.. sign the jar.
    doLast {
        jar.destinationDir.eachFile { file ->
            if (!file.getPath().endsWith(".jar"))
                return; // skip non-jars

            logger.lifecycle "signing $file"
            ant.signjar(
                    destDir: file.getParentFile(), // same place it came from
                    jar: file,
                    keystore: keystore_location,
                    alias: ms_keystore_alias,
                    storepass: keystore_password
            )
        }
    }
}

uploadArchives {
    repositories.mavenDeployer {
        if (project.hasProperty("maven_url")) {
            println 'Publishing to files server'

            configuration = configurations.deployerJars
            repository(url: project.maven_url) {
                authentication(userName: project.maven_username, password: project.maven_password)
            }
            pom {
                groupId = project.group
                version = project.version
                artifactId = project.archivesBaseName
            }

            pom.project {
                name project.archivesBaseName
                packaging 'jar'
                description 'MoarSigns'
                url 'https://github.com/GoryMoon/MoarSigns/'

                scm {
                    url 'https://github.com/GoryMoon/MoarSigns/'
                    connection 'scm:git:git://github.com/GoryMoon/MoarSigns.git'
                    developerConnection 'scm:git:git@github.com/GoryMoon/MoarSigns.git'
                }

                issueManagement {
                    system 'github'
                    url 'https://github.com/GoryMoon/MoarSigns/issues'
                }

                licenses {
                    license {
                        name 'GNU Lesser General Public License 3.0'
                        url 'https://www.gnu.org/licenses/lgpl-3.0.txt'
                        distribution 'repo'
                    }
                }

                developers {
                    developer {
                        id 'Gory_Moon'
                        name 'Gory_Moon'
                        roles {
                            role 'developer'
                        }
                    }
                }
            }
        }
    }
}

idea { module { inheritOutputDirs = true } }